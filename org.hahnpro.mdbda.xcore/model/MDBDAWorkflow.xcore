package org.hahnpro.mdbda.model.workflow

import org.hahnpro.mdbda.model.pattern.*
import org.hahnpro.mdbda.model.resources.Resource
import org.eclipse.emf.common.util.EList

class Workflow extends Pattern{
	contains Pattern[] pattern opposite workflow
	
	contains Resource[] dataResources
	
	refers Pattern startPattern
	String name
	
	op Resource[] getInputDataResources()
	{
		//input data resources are dataResources with no inputResources
		var EList<Resource> inputDataResources
		for( Resource res : dataResources){
			if( res.inputResources.empty ){
				inputDataResources.add(res)
			}
		}
		
		return inputDataResources
	}
	
	op Resource[] getOutputDataResources(){
		//output data resources are dataResources with no inputResources
		var EList<Resource> outputDataResources
		for( Resource res : dataResources){
			if( res.inputResources.empty ){
				outputDataResources.add(res)
			}
		}
		
		return outputDataResources
	}
} 
