@GenModel(editDirectory="/org.mdbda.xcore/src-edit", editorDirectory="/org.mdbda.xcore/src-editor", fileExtensions="mdbdamodel")
package org.mdbda.model

/*TODO 
 * http://www.vogella.com/articles/EclipseEMF/article.html#inheritance
 * http://help.eclipse.org/indigo/index.jsp?topic=/org.eclipse.emf.doc/tutorials/slibmod/slibmod.html
 */
import java.util.HashSet
import org.eclipse.emf.ecore.util.EcoreUtil

class MDBDADiagram{
	contains Workflow rootWorkflow opposite diagram
	
	contains Resource[] resources
	
	String configurationString

	String author
	String version
	String name
}

class Workflow extends Task{
	contains Task[] tasks opposite workflow 
	container MDBDADiagram diagram opposite rootWorkflow
	 
	contains Resource[] dataResources
	
	refers Task startTask
	op Resource[] getInputDataResources()
	{
		//input data resources are dataResources with no inputResources
		var HashSet<Resource> inputDataResources = new HashSet<Resource>()
		for( Resource res : dataResources){
			if( res.inputResources.empty ){
				inputDataResources.add(res)
			}
		}
		
		return inputDataResources.toEList
	}
	
	op Resource[] getOutputDataResources(){
		//output data resources are dataResources with no inputResources
		var HashSet<Resource> outputDataResources = new HashSet<Resource>()
		for( Resource res : dataResources){
			if( res.inputResources.empty ){
				outputDataResources.add(res)
			}
		}
		
		return outputDataResources.toEList
	}
}

class RemoteWorkflow extends Resource{
}
 
class Task extends Resource{
	container Workflow workflow opposite tasks
	refers Task[] dependsOn
	int maxInputCount
	int maxOutputCount
	
} 


class Resource{	
	refers Resource[] inputResources
	refers Resource[] outputResources
 @GenModel(propertyMultiLine="true")
	String configurationString
	String typeId
	String name
	
	op boolean equals(Object obj) {
		if (obj instanceof Resource) {
			return EcoreUtil.equals(this, obj)
 		} 
		return false
	}
}

